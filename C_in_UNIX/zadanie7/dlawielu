// Pseudokod dla problemu Producenta i Konsumenta z buforem cyklicznym.
// Wspolny bufor do przesylania danych znajduje sie w pamieci dzielonej.
// Dostep do bufora jest synchronizowany semaforami.

#define N ? // Rozmiar bufora

typdef struct { ... } Towar; // Definicja typu dla jednostek towaru

Towar bufor[N]; // Bufor mogacy pomiescic N jednostek towaru

int wstaw = 0, wyjmij = 0; // Pozycje wstawiania oraz wyjmowania towaru

// z bufora (mozna umiescic w pamieci dzielonej)
semaphore PROD = N; // Semafor do wstrzymywania Producenta
semaphore KONS = 0; // Semafor do wstrzymywania Konsumenta

Kpgid   //pgid grupy konsumentow
Ppgid   //pgid grupy producentow

// Proces Producent
// ----------------
Towar towarProd;

while (1) {
// Produkcja towaru
P(PROD); // Opusc semafor Producenta
bufor[wstaw] = towarProd; // Umiesc towar w buforze
wstaw = (wstaw + 1) % N; // Przesun pozycje wstawiania o 1 dalej
V(KONS); // Podniesc semafor Konsumenta
}
kill(Ppgid);

// Proces Konsument
// ----------------
Towar towarKons;

while (1) {
P(KONS); // Opusc semafor Konsumenta
towarKons = bufor[wyjmij]; // Umiesc towar w buforze
wyjmij = (wyjmij + 1) % N; // Przesun pozycje wstawiania o 1 dalej
V(PROD); // Podniesc semafor Producenta
// Konsumpcja towaru
}
kill(Kpgid);